# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ChunkDay {
  id: String!
}

type EntryType {
  id: Int!
  type: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type CycleChunk {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  startDate: Date!
  endDate: Date!
  chunkDays: [ChunkDay!]!
  goalEntries: [ChunkDay!]!
  cycle: Cycle!
  averageWeight: String!

  """Returns the weight difference compared to the previous chunk"""
  compareWithPrevious: String!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

type Cycle {
  id: String!
  name: String!
  startDate: Date!
  endDate: Date!
  cycleChunks: [CycleChunk!]!
  active: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  chunkLength: Int!
}

type Entry {
  id: String!
  entryDate: DateTime!
  weight: String!
  cycleChunk: [CycleChunk!]!
}

type Query {
  cycles: [Cycle!]!
  cycle(id: String!): Cycle!
  activeCycle: Cycle
  entry(id: String!): Entry!
  entries: [Entry!]!
  cycleChunksForCycle(id: String!): [CycleChunk!]!
  cycleChunk(id: String!): CycleChunk!
  cycleChunkInDateRange(cycleId: String!, inDateRangeInput: InDateRangeInput!): CycleChunk
  entryTypes: [EntryType!]!
}

input InDateRangeInput {
  startDate: Date!
  endDate: Date!
}

type Mutation {
  createCycle(createCycleInput: CreateCycleInput!): Cycle!
  toggleActiveCycle(id: String!, toggleActiveInput: ToggleActiveInput!): Cycle!
  createEntry(createEntryInput: CreateEntryInput!): Entry!

  """Returns the id of the deleted entity"""
  deleteEntry(id: String!): String!
  updateEntry(id: String!, updateEntryInput: UpdateEntryInput!): Entry!
  addCycleChunkGoalEntry(addChunkGoalEntryInput: AddChunkGoalEntryInput!): CycleChunk!
}

input CreateCycleInput {
  startDate: Date!
  endDate: Date!
  name: String
}

input ToggleActiveInput {
  active: Boolean!
}

input CreateEntryInput {
  entryDate: DateTime!
  weight: String!
  cycleId: String!
}

input UpdateEntryInput {
  weight: String!
}

input AddChunkGoalEntryInput {
  cycleId: String!
  chunkNumber: Float!
  entryTypeId: Float!
  entryValue: String!
}